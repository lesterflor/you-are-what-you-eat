generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  password            String?
  role                String                @default("user")
  image               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  accounts            Account[]
  sessions            Session[]
  logs                Log[]
  BaseMetabolicRate   BaseMetabolicRate[]
  KnownCaloriesBurned KnownCaloriesBurned[]
  FoodItems           FoodItem[]
  LogRemainder        LogRemainder[]
  userNotes           UserNote[]
  groceryLists        GroceryList[]
  activityLogs        ActivityLog[]
  activityItems       ActivityItem[]
  foodItemFavourites  FoodItemFavourite[]
  preparedDishes      PreparedDish[]
}

model FoodItem {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  name               String              @unique
  category           String
  description        String?
  servingSize        Float?              @default(1)
  image              String?
  carbGrams          Float               @default(0)
  fatGrams           Float               @default(0)
  proteinGrams       Float               @default(0)
  calories           Float               @default(0)
  user               User?               @relation(fields: [userId], references: [id])
  userId             String?             @db.ObjectId
  foodItemFavourites FoodItemFavourite[]
}

model FoodItemFavourite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String   @db.ObjectId
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  userId              String                @db.ObjectId
  foodItems           FoodEntry[]
  knownCaloriesBurned KnownCaloriesBurned[]
  logRemainder        LogRemainder[]
}

type FoodEntry {
  id           String
  name         String
  category     String
  description  String?
  numServings  Float
  image        String?
  carbGrams    Float
  fatGrams     Float
  proteinGrams Float
  calories     Float
  eatenAt      DateTime @default(now())
}

model BaseMetabolicRate {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  weight     Float
  weightUnit String
  height     Float
  heightUnit String
  age        Int
  sex        String
  bmr        Float
}

model KnownCaloriesBurned {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  calories  Float    @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  log       Log      @relation(fields: [logId], references: [id])

  logId String @db.ObjectId
}

model LogRemainder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  calories  Float    @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  log       Log      @relation(fields: [logId], references: [id])
  logId     String   @db.ObjectId
}

model UserNote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String?
  note      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model GroceryList {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sharedUsers String[]

  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  status       String
  groceryItems GroceryItem[]
}

model GroceryItem {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String
  description   String?
  qty           Float
  status        String
  grocerList    GroceryList? @relation(fields: [groceryListId], references: [id])
  groceryListId String?      @db.ObjectId
}

model ActivityLog {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  activityItems ActivityItem[]
}

model ActivityItem {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  activityLog   ActivityLog @relation(fields: [activityLogId], references: [id])
  activityLogId String      @db.ObjectId

  type   String
  action String
  data   String
}

model PreparedDish {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId

  foodItems FoodEntry[]
}

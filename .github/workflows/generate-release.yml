name: Bump version and update RELEASE.md

on:
  pull_request:
    types:
      - closed

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      # Step 1: Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      # Step 3: Configure Git
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 4: Bump version (patch rollover)
      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Roll PATCH to MINOR if >= 99
          if [ "$PATCH" -ge 99 ]; then
            PATCH=0
            MINOR=$((MINOR + 1))
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          # Update package.json and commit/tag
          npm version "$NEW_VERSION" -m "chore: bump version to %s [skip ci]"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Step 5: Generate RELEASE.md
      - name: Generate RELEASE.md
        id: generate_release
        run: |
          VERSION=${{ steps.bump_version.outputs.new_version }}
          echo "Generating RELEASE.md for version $VERSION"

          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            RANGE="HEAD"
          else
            RANGE="$LAST_TAG..HEAD"
          fi
          echo "Commit range: $RANGE"

          # Ensure GitHub CLI is installed
          if ! command -v gh &>/dev/null; then
            sudo apt-get update && sudo apt-get install -y gh
          fi

          # Authenticate gh CLI
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          # Get merged PRs
          MERGED_PRS=$(gh pr list --state merged --base main --json title,number,author,mergedAt \
            --jq ".[] | select(.mergedAt >= \"$(git log -1 --format=%ci $LAST_TAG)\" ) | \"#\(.number) - \(.title) (@\(.author.login))\"")

          TMP_FILE=$(mktemp)
          {
            echo "## Version $VERSION - $(date +'%Y-%m-%d')"
            echo
            if [ -z "$MERGED_PRS" ]; then
              echo "No merged pull requests for this release."
            else
              echo "$MERGED_PRS"
            fi
            echo
          } > $TMP_FILE

          # Append to RELEASE.md
          cat $TMP_FILE >> RELEASE.md
          rm $TMP_FILE

          echo "release_version=$VERSION" >> $GITHUB_OUTPUT

      # Step 6: Commit and push updates
      - name: Commit and push package.json + RELEASE.md
        run: |
          git add package.json package-lock.json RELEASE.md
          git commit -m "chore: bump version ${{ steps.bump_version.outputs.new_version }} and update RELEASE.md [skip ci]" || echo "No changes to commit"
          git push origin HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
